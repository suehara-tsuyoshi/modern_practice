リスト5-1
const http = require('http');

var server = http.createServer(
  (req, res)=>{
    res.end('Hello, Node.js!!!');
  }
)
server.listen(3000);






リスト5-2  ――./app.jsファイル
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;





リスト5-3――./bin/wwwファイル
#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('express-app:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {……略……}

function onError(error) {……略……}

function onListening() {……略……}





リスト5-4――./routes/index.jsファイル
var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
    res.render('index', { title: 'Express' });
});

module.exports = router;





リスト5-5――./views/index.ejsファイル
<!DOCTYPE html>
<html>
    <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    </head>
    <body>
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>
    </body>
</html>





リスト5-6――./package.jsonファイル
{
  "name": "express-app",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www"
  },
  "dependencies": {
    "cookie-parser": "~1.4.4",
    "debug": "~2.6.9",
    "ejs": "~2.6.1",
    "express": "~4.16.1",
    "http-errors": "~1.6.3",
    "morgan": "~1.9.1"
  }
}





リスト5-7――./views/hello.ejsファイル
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    <link rel="stylesheet" 
    href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.css">
</head>
<body class="container p-3">
    <h1><%= title %></h1>
    <p id="msg" class="h4"><%- message %></p>
</body>
</html>





リスト5-8――./routes/hello.jsファイル
var express = require('express');
var router = express.Router();

let opt = {
    title: 'Hello!',
    message:'これは新しいWebページです。'
}
router.get('/', function(req, res, next) {
    res.render('hello', opt);
});

module.exports = router;





リスト5-9――./app.jsファイル
var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
var helloRouter = require('./routes/hello'); 



リスト5-10
app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/hello', helloRouter);





リスト5-11――./routes/hello.jsファイル
var express = require('express');
var router = express.Router();

router.get('/', function(req, res, next) {
    let name = req.query.name;
    let pass = req.query.pass;
    let msg = 'name: ' + name + 
        '<br>password: ' + pass;
    let opt = {
        title: 'Hello!',
        message:msg
    }
    res.render('hello', opt);
});

module.exports = router;





リスト5-12――./views/hello.ejsファイル
<body class="container p-3">
    <h1><%= title %></h1>
    <p id="msg" class="h4"><%- message %></p>
    <form method="post" action="/hello">
        <div class="form-group">
            <label for="f1">Name</label>
            <input type="text" id="f1" name="f1" 
                class="form-control">
        </div>
        <div class="form-group">
            <label for="f2">Password</label>
            <input type="password" id="f2" name="f2" 
                class="form-control">
        </div>
        <div class="form-group">
            <input type="submit" class="btn btn-primary">
        </div>
    </form>
</body>





リスト5-13――./routes/hello.jsファイル
var express = require('express');
var router = express.Router();

router.get('/', function(req, res, next) {
    let opt = {
        title: 'Hello!',
        message:'input form:'
    }
    res.render('hello', opt);
});

router.post('/', function(req, res, next) {
    let name = req.body.f1;
    let pass = req.body.f2;
    let msg = 'name: ' + name + 
        '<br>password: ' + pass;
    let opt = {
        title: 'Hello!',
        message: msg
    }
    res.render('hello', opt);
});

module.exports = router;





リスト5-14――./routes/hello.jsファイル
var express = require('express');
var router = express.Router();

router.get('/', function(req, res, next) {

    let opt = {
        title: 'Hello!',
        form:null
    }
    res.render('hello', opt);
});

router.post('/', function(req, res, next) {
    let opt = {
        title: 'Hello!',
        form:req.body
    }
    res.render('hello', opt);
});

module.exports = router;





リスト5-15――./views/hello.ejsファイル
<body class="container p-3">
    <h1><%= title %></h1>
    <% 
        if (form == null){
            message = 'no form data.';
        } else {
            message = '<ul>' +
                '<li>' + form.f1 + '</li>' +
                '<li>' + form.f2 + '</li>' +
                '</ul>'
        }
    %>
    <p id="msg" class="h4"><%- message %></p>
    <form method="post" action="/hello">
        <div class="form-group">
            <label for="f1">Name</label>
            <input type="text" id="f1" name="f1" 
                class="form-control">
        </div>
        <div class="form-group">
            <label for="f2">Password</label>
            <input type="password" id="f2" name="f2" 
                class="form-control">
        </div>
        <div class="form-group">
            <input type="submit" class="btn btn-primary">
        </div>
    </form>
</body>





リスト5-16――./views/hello.ejsファイル
<body class="container p-3">
    <h1><%= title %></h1>
    <form method="post" action="/hello">
        <div class="form-group">
            <label for="f1">Message</label>
            <input type="text" id="f1" name="msg" 
                class="form-control">
        </div>
        <div class="form-group">
            <input type="submit" class="btn btn-primary">
        </div>
    </form>
    <hr>
    <ol>
    <% for(let i in data){ %>
    <li><%= data[i] %></li>
    <% } %>
    </ol>
</body>





リスト5-17――./routes/hello.jsファイル
var express = require('express');
var router = express.Router();

var data = [];

router.get('/', function(req, res, next) {

    let opt = {
        title: 'Hello!',
        data:data
    }
    res.render('hello', opt);
});

router.post('/', function(req, res, next) {
    data.unshift(req.body.msg);
    let opt = {
        title: 'Hello!',
        data:data
    }
    res.render('hello', opt);
});

module.exports = router;





リスト5-18――./app.jsファイル
var session = require('express-session');





リスト5-19――./app.jsファイル
let ses_opt = {
    secret: 'my secret',
    resave: false,
    saveUninitialized: false,
    cookie: { maxAge: 60 * 60 * 1000 }
};
app.use(session(ses_opt));





リスト5-20――./routes/hello.jsファイル
var express = require('express');
var router = express.Router();

router.get('/', function(req, res, next) {
    if (req.session.data == undefined){
        req.session.data = [];
    }
    let opt = {
        title: 'Hello!',
        data:req.session.data
    }
    res.render('hello', opt);
});

router.post('/', function(req, res, next) {
    req.session.data.unshift(req.body.msg);
    let opt = {
        title: 'Hello!',
        data:req.session.data
    }
    res.render('hello', opt);
});

module.exports = router;





リスト5-21――./views/header.ejsファイル
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    <link rel="stylesheet" 
    href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.css">
</head>
<body class="container">
<%-include('nav') %>
<h1 class="mt-3 mb-3">
    <%= title %>
</h1>





リスト5-22――./views/footer.ejsファイル
<hr class="mt-5">
<div>
    <p class="text-center h6">copyright MYNAVI 2019.</p>
</div>
</body>
</html>





リスト5-23――./views/nav.ejsファイル
<nav class="navbar navbar-expand-sm navbar-dark bg-secondary">
    <ul class="navbar-nav">
        <li class="nav-item active">
        <a class="navbar-brand" href="/">Top</a>
        </li>
        <li class="nav-item active">
        <a class="nav-link" href="/hello">Hello</a>
        </li>
        <li class="nav-item active">
        <a class="nav-link" href="/users">Users</a>
        </li>
    </ul>
</nav>





リスト5-24――./views/hello.ejsファイル
<%-include('header') %>

<p>※これが、このページのコンテンツです。</p>

<%-include('footer') %>
